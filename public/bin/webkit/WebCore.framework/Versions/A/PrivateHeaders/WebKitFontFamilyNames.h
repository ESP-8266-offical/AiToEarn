/*
 * THIS FILE WAS AUTOMATICALLY GENERATED, DO NOT EDIT.
 *
 * This file was generated by the dom/make_names.pl script.
 *
 * Copyright (C) 2005, 2006, 2007, 2008, 2009, 2013 Apple Inc.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY APPLE INC. ``AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL APPLE INC. OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
 * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#pragma once

#include <wtf/NeverDestroyed.h>
#include <wtf/Vector.h>
#include <wtf/text/AtomString.h>


namespace WebCore {

namespace WebKitFontFamilyNames {

enum class FamilyNamesIndex {
    CursiveFamily,
    FantasyFamily,
    MonospaceFamily,
    PictographFamily,
    SansSerifFamily,
    SerifFamily,
    StandardFamily,
    SystemUiFamily,
};

template<typename T, size_t inlineCapacity = 0>
class FamilyNamesList : public Vector<T, inlineCapacity> {
public:
    T& at(FamilyNamesIndex i)
    {
        return Vector<T, inlineCapacity>::at(static_cast<size_t>(i));
    }
};

extern LazyNeverDestroyed<FamilyNamesList<const StaticStringImpl*, 8>> familyNamesData;
extern MainThreadLazyNeverDestroyed<FamilyNamesList<AtomStringImpl*, 8>> familyNames;

extern MainThreadLazyNeverDestroyed<const AtomString> cursiveFamily;
extern MainThreadLazyNeverDestroyed<const AtomString> fantasyFamily;
extern MainThreadLazyNeverDestroyed<const AtomString> monospaceFamily;
extern MainThreadLazyNeverDestroyed<const AtomString> pictographFamily;
extern MainThreadLazyNeverDestroyed<const AtomString> sansSerifFamily;
extern MainThreadLazyNeverDestroyed<const AtomString> serifFamily;
extern MainThreadLazyNeverDestroyed<const AtomString> standardFamily;
extern MainThreadLazyNeverDestroyed<const AtomString> systemUiFamily;



WEBCORE_EXPORT void init();

} }

